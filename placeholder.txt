Signup API (controllers/auth.ts)

import jwt from "jsonwebtoken";
import { Request, Response } from "express";
import User from "../models/User";
import dotenv from "dotenv";

dotenv.config();

const users: User[] = []; // Temporary in-memory storage

export const signup = async (req: Request, res: Response) => {
  try {
    const { username, email, password } = req.body;
    
    // Check if email already exists
    if (users.find((user) => user.email === email)) {
      return res.status(400).json({ message: "Email already registered." });
    }

    // Create new user
    const newUser = new User(username, email, password);
    users.push(newUser); // Store user in memory (replace with DB save)

    // Generate JWT token
    const token = jwt.sign({ id: newUser.id, email: newUser.email }, process.env.JWT_SECRET as string, {
      expiresIn: process.env.JWT_EXPIRES_IN,
    });

    res.status(201).json({ message: "Signup successful!", token });
  } catch (error) {
    res.status(500).json({ message: "Internal server error" });
  }
};

5️⃣ Login API (controllers/auth.ts)

export const login = async (req: Request, res: Response) => {
  try {
    const { email, password } = req.body;

    const user = users.find((user) => user.email === email);
    if (!user || !user.validatePassword(password)) {
      return res.status(401).json({ message: "Invalid email or password." });
    }

    // Generate JWT token
    const token = jwt.sign({ id: user.id, email: user.email }, process.env.JWT_SECRET as string, {
      expiresIn: process.env.JWT_EXPIRES_IN,
    });

    res.status(200).json({ message: "Login successful!", token });
  } catch (error) {
    res.status(500).json({ message: "Internal server error" });
  }
};

6️⃣ Protecting Routes (Middleware)

import { Request, Response, NextFunction } from "express";
import jwt from "jsonwebtoken";

export const authenticateJWT = (req: Request, res: Response, next: NextFunction) => {
  const token = req.headers.authorization?.split(" ")[1]; // Get token from Bearer header

  if (!token) {
    return res.status(403).json({ message: "Access denied. No token provided." });
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET as string);
    req.user = decoded; // Attach decoded user data to request
    next();
  } catch (error) {
    res.status(401).json({ message: "Invalid or expired token." });
  }
};

7️⃣ Using Authentication Middleware

import express from "express";
import { authenticateJWT } from "../middlewares/auth";
const router = express.Router();

router.get("/profile", authenticateJWT, (req, res) => {
  res.json({ message: "Welcome to your profile", user: req.user });
});

export default router;

FROM DBMG:
const verifyAndExtractToken = require("../services/tokenService");

const authUser = async (req, res, next) => {
  try {
    const payload = verifyAndExtractToken(
      req.headers.authorization,
      process.env.USER_JWT,
      "Authentication Invalid: Token Not Authorized",
    );
    req.user = { userID: payload.userID, name: payload.name };
    next();
  } catch (error) {
    next(error);
  }
};

module.exports = authUser;
